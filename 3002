[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): server.ts src/**/*[39m
[33m[nodemon] watching extensions: ts,tsx,js,jsx[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
Port 3002 in use. Retrying on 3003...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
> Ready on http://0.0.0.0:3003
> Socket.IO server running at ws://0.0.0.0:3003/api/socketio
 âœ“ Compiled /middleware in 99ms (108 modules)
 â—‹ Compiling /admin/seo ...
 âœ“ Compiled /admin/seo in 1261ms (1047 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /admin/seo?ide_webview_request_time=1761441796188 200 in 1846ms
 âœ“ Compiled in 607ms (469 modules)
 âœ“ Compiled /api/admin/bonuses in 326ms (1060 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 434ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE 1=1 ORDER BY `main`.`SeoSetting`.`page` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE `main`.`SeoSetting`.`page` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) AS `_count._all` FROM (SELECT `main`.`Bonus`.`id` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? LIMIT ? OFFSET ?) AS `sub`
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/seo 200 in 376ms
 GET /api/seo?page=__organization__ 200 in 377ms
 GET /api/seo?page=%2Fadmin%2Fseo 200 in 408ms
 GET /api/admin/bonuses?status=pending&page=1&limit=1 200 in 408ms
 GET /api/analytics-codes 200 in 409ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 âœ“ Compiled /api/pages in 88ms (1063 modules)
 GET /api/pages 200 in 123ms
 âœ“ Compiled /[slug] in 157ms (1065 modules)
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 637ms
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /admin/seo?ide_webview_request_time=1761441852296 200 in 202ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 30ms
 GET /api/analytics-codes 200 in 17ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/seo?page=%2Fadmin%2Fseo 200 in 23ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS `_count._all` FROM (SELECT `main`.`Bonus`.`id` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? LIMIT ? OFFSET ?) AS `sub`
 GET /api/admin/bonuses?status=pending&page=1&limit=1 200 in 27ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/seo 200 in 20ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE 1=1 ORDER BY `main`.`SeoSetting`.`page` ASC LIMIT ? OFFSET ?
 GET /api/seo?page=__organization__ 200 in 22ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/pages 200 in 15ms
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 32ms
 â—‹ Compiling / ...
 âœ“ Compiled / in 1338ms (1928 modules)
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET / 200 in 1492ms
 âœ“ Compiled /api/partner-sites in 137ms (1045 modules)
 âœ“ Compiled in 115ms (901 modules)
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
 GET /api/marquee-logos 200 in 362ms
 GET /api/bonuses?active=true&featured=true 200 in 368ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 366ms
 GET /api/partner-sites 200 in 367ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/seo?page=%2F 200 in 377ms
 âœ“ Compiled /kampanyalar in 357ms (1967 modules)
prisma:query SELECT 1
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE `main`.`Campaign`.`isActive` = ? ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /kampanyalar 200 in 606ms
 âœ“ Compiled /api/page-articles/[slug] in 394ms (1975 modules)
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 376ms
 GET /api/seo?page=%2Fkampanyalar 200 in 377ms
 GET /api/seo?page=/kampanyalar 200 in 377ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE `main`.`SeoSetting`.`page` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 511ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 477ms
 âœ“ Compiled /guvenilir-bahis-siteleri-listesi in 417ms (1987 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE `main`.`SeoSetting`.`page` = ? LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE `main`.`SeoSetting`.`page` = ? LIMIT ? OFFSET ?
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/page-articles/kampanyalar 404 in 1318ms
 GET /guvenilir-bahis-siteleri-listesi 200 in 757ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 31ms
 âœ“ Compiled /api/carousel in 340ms (1989 modules)
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
 GET /api/marquee-logos 200 in 410ms
 GET /api/partner-sites 200 in 409ms
 GET /api/analytics-codes 200 in 413ms
 GET /api/seo?page=%2Fguvenilir-bahis-siteleri-listesi 200 in 412ms
 GET /api/page-articles/guvenilir-bahis-siteleri-listesi 404 in 413ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/carousel 200 in 430ms
prisma:query SELECT `main`.`CarouselSlide`.`id`, `main`.`CarouselSlide`.`title`, `main`.`CarouselSlide`.`subtitle`, `main`.`CarouselSlide`.`imageUrl`, `main`.`CarouselSlide`.`desktopImageUrl`, `main`.`CarouselSlide`.`mobileImageUrl`, `main`.`CarouselSlide`.`ctaLabel`, `main`.`CarouselSlide`.`ctaUrl`, `main`.`CarouselSlide`.`order`, `main`.`CarouselSlide`.`isActive`, `main`.`CarouselSlide`.`createdAt`, `main`.`CarouselSlide`.`updatedAt` FROM `main`.`CarouselSlide` WHERE 1=1 ORDER BY `main`.`CarouselSlide`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses?active=true&featured=true 200 in 26ms
 âœ“ Compiled /uploads/[...file] in 256ms (1992 modules)
Error: Route "/uploads/[...file]" used `params.file`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/uploads/[...file]/route.ts:18:23)
  16 |   try {
  17 |     const uploadsDir = path.join(process.cwd(), 'public', 'uploads')
> 18 |     const rel = params.file?.join('/') || ''
     |                       ^
  19 |     const resolved = path.resolve(uploadsDir, rel)
  20 |     if (!resolved.startsWith(uploadsDir)) {
  21 |       return NextResponse.json({ error: 'Invalid path' }, { status: 400 })
 GET /uploads/1760137839229-yam6716sfc.jpg 404 in 661ms
 âœ“ Compiled /yorumlar in 184ms (2002 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /yorumlar 200 in 380ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 25ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/seo?page=%2Fyorumlar 200 in 13ms
 â—‹ Compiling /[slug] ...
 âœ“ Compiled /[slug] in 504ms (2008 modules)
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 561ms
 GET /api/page-articles/yorumlar 404 in 560ms
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/site-reviews/stats 200 in 571ms
prisma:query SELECT `main`.`ReviewBrand`.`id`, `main`.`ReviewBrand`.`slug`, `main`.`ReviewBrand`.`name`, `main`.`ReviewBrand`.`logoUrl`, `main`.`ReviewBrand`.`createdAt`, `main`.`ReviewBrand`.`isActive` FROM `main`.`ReviewBrand` WHERE 1=1 LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SiteReview`.`id`, `main`.`SiteReview`.`brandId`, `main`.`SiteReview`.`createdAt` FROM `main`.`SiteReview` WHERE `main`.`SiteReview`.`isApproved` = ? ORDER BY `main`.`SiteReview`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) AS `_count._all`, `main`.`SiteReview`.`brandId` FROM `main`.`SiteReview` WHERE `main`.`SiteReview`.`isApproved` = ? GROUP BY `main`.`SiteReview`.`brandId` LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) AS `_count._all`, `main`.`SiteReview`.`brandId`, `main`.`SiteReview`.`isPositive` FROM `main`.`SiteReview` WHERE `main`.`SiteReview`.`isApproved` = ? GROUP BY `main`.`SiteReview`.`brandId`, `main`.`SiteReview`.`isPositive` LIMIT ? OFFSET ?
prisma:query SELECT `main`.`ReviewBrand`.`id`, `main`.`ReviewBrand`.`name`, `main`.`ReviewBrand`.`slug`, `main`.`ReviewBrand`.`logoUrl`, `main`.`ReviewBrand`.`editorialSummary`, `main`.`ReviewBrand`.`siteUrl`, `main`.`ReviewBrand`.`isActive`, `main`.`ReviewBrand`.`createdAt`, `main`.`ReviewBrand`.`updatedAt` FROM `main`.`ReviewBrand` WHERE `main`.`ReviewBrand`.`isActive` = ? ORDER BY `main`.`ReviewBrand`.`createdAt` DESC LIMIT ? OFFSET ?
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
 GET /api/review-brands?active=true 200 in 596ms
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 404ms
 âœ“ Compiled /banko-kuponlar in 426ms (2056 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /banko-kuponlar 200 in 629ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/seo?page=%2Fbanko-kuponlar 200 in 15ms
 GET /api/analytics-codes 200 in 24ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 25ms
 âœ“ Compiled /api/banko-coupons/archive/stats in 415ms (2060 modules)
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
prisma:query SELECT `main`.`BankoCoupon`.`id`, `main`.`BankoCoupon`.`status` FROM `main`.`BankoCoupon` WHERE `main`.`BankoCoupon`.`date` >= ? LIMIT ? OFFSET ?
prisma:query SELECT `main`.`BankoCoupon`.`id`, `main`.`BankoCoupon`.`title`, `main`.`BankoCoupon`.`date`, `main`.`BankoCoupon`.`publishedAt`, `main`.`BankoCoupon`.`isActive`, `main`.`BankoCoupon`.`totalOdd`, `main`.`BankoCoupon`.`status`, `main`.`BankoCoupon`.`upVotes`, `main`.`BankoCoupon`.`downVotes`, `main`.`BankoCoupon`.`createdAt`, `main`.`BankoCoupon`.`updatedAt` FROM `main`.`BankoCoupon` WHERE 1=1 ORDER BY `main`.`BankoCoupon`.`date` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`BankoMatch`.`id`, `main`.`BankoMatch`.`couponId`, `main`.`BankoMatch`.`homeTeam`, `main`.`BankoMatch`.`awayTeam`, `main`.`BankoMatch`.`league`, `main`.`BankoMatch`.`startTime`, `main`.`BankoMatch`.`prediction`, `main`.`BankoMatch`.`odd`, `main`.`BankoMatch`.`resultScore`, `main`.`BankoMatch`.`result`, `main`.`BankoMatch`.`createdAt`, `main`.`BankoMatch`.`updatedAt` FROM `main`.`BankoMatch` WHERE `main`.`BankoMatch`.`couponId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/banko-coupons/archive/stats 200 in 481ms
 GET /api/banko-coupons 200 in 482ms
 GET /api/bonuses?active=true&featured=true 200 in 482ms
 GET /api/page-articles/banko-kuponlar 404 in 481ms
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 âœ“ Compiled /out in 208ms (2062 modules)
 GET /out?u=https%3A%2F%2Ft.me%2F%2Br577e3x2dhIxNjdk&ide_webview_request_time=1761443700003 200 in 236ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 47ms
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 26ms
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
 GET /service-worker.js 302 in 44ms
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /banko-kuponlar 200 in 143ms
 GET /api/seo?page=%2Fbanko-kuponlar 200 in 10ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 15ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 18ms
prisma:query SELECT `main`.`BankoCoupon`.`id`, `main`.`BankoCoupon`.`title`, `main`.`BankoCoupon`.`date`, `main`.`BankoCoupon`.`publishedAt`, `main`.`BankoCoupon`.`isActive`, `main`.`BankoCoupon`.`totalOdd`, `main`.`BankoCoupon`.`status`, `main`.`BankoCoupon`.`upVotes`, `main`.`BankoCoupon`.`downVotes`, `main`.`BankoCoupon`.`createdAt`, `main`.`BankoCoupon`.`updatedAt` FROM `main`.`BankoCoupon` WHERE 1=1 ORDER BY `main`.`BankoCoupon`.`date` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`BankoMatch`.`id`, `main`.`BankoMatch`.`couponId`, `main`.`BankoMatch`.`homeTeam`, `main`.`BankoMatch`.`awayTeam`, `main`.`BankoMatch`.`league`, `main`.`BankoMatch`.`startTime`, `main`.`BankoMatch`.`prediction`, `main`.`BankoMatch`.`odd`, `main`.`BankoMatch`.`resultScore`, `main`.`BankoMatch`.`result`, `main`.`BankoMatch`.`createdAt`, `main`.`BankoMatch`.`updatedAt` FROM `main`.`BankoMatch` WHERE `main`.`BankoMatch`.`couponId` IN (?) LIMIT ? OFFSET ?
 GET /api/banko-coupons 200 in 9ms
prisma:query SELECT `main`.`BankoCoupon`.`id`, `main`.`BankoCoupon`.`status` FROM `main`.`BankoCoupon` WHERE `main`.`BankoCoupon`.`date` >= ? LIMIT ? OFFSET ?
 GET /api/banko-coupons/archive/stats 200 in 16ms
 GET /api/bonuses?active=true&featured=true 200 in 16ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
 GET /api/page-articles/banko-kuponlar 404 in 41ms
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT 1
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 30ms
 âœ“ Compiled /bonuslar in 499ms (2084 modules)
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /bonuslar?type=Deneme%20Bonusu 200 in 746ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 26ms
 GET /api/analytics-codes 200 in 13ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/seo?page=%2Fbonuslar 200 in 16ms
 GET /api/bonuses?active=true 200 in 12ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
Error: Route "/api/page-articles/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/api/page-articles/[slug]/route.ts:6:24)
  4 | export async function GET(req: NextRequest, { params }: { params: { slug: string } }) {
  5 |   try {
> 6 |     const slug = params.slug
    |                        ^
  7 |     if (!slug) return NextResponse.json({ error: 'Slug gerekli' }, { status: 400 })
  8 |     const item = await (db as any).pageArticle.findUnique({ where: { slug } })
  9 |     if (!item) return NextResponse.json({ error: 'BulunamadÄ±' }, { status: 404 })
prisma:query SELECT `main`.`CarouselSlide`.`id`, `main`.`CarouselSlide`.`title`, `main`.`CarouselSlide`.`subtitle`, `main`.`CarouselSlide`.`imageUrl`, `main`.`CarouselSlide`.`desktopImageUrl`, `main`.`CarouselSlide`.`mobileImageUrl`, `main`.`CarouselSlide`.`ctaLabel`, `main`.`CarouselSlide`.`ctaUrl`, `main`.`CarouselSlide`.`order`, `main`.`CarouselSlide`.`isActive`, `main`.`CarouselSlide`.`createdAt`, `main`.`CarouselSlide`.`updatedAt` FROM `main`.`CarouselSlide` WHERE 1=1 ORDER BY `main`.`CarouselSlide`.`order` ASC LIMIT ? OFFSET ?
 GET /api/carousel 200 in 38ms
 GET /api/page-articles/bonuslar 404 in 39ms
prisma:query SELECT `main`.`PageArticle`.`id`, `main`.`PageArticle`.`slug`, `main`.`PageArticle`.`title`, `main`.`PageArticle`.`content`, `main`.`PageArticle`.`createdAt`, `main`.`PageArticle`.`updatedAt` FROM `main`.`PageArticle` WHERE (`main`.`PageArticle`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 42ms
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /bonuslar?type=Deneme%20Bonusu 404 in 60ms
 GET /api/seo?page=%2Fbonuslar 200 in 25ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 32ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 30ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 404 in 24ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
Port 3002 in use. Retrying on 3003...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
> Ready on http://0.0.0.0:3003
> Socket.IO server running at ws://0.0.0.0:3003/api/socketio
 âœ“ Compiled /middleware in 98ms (108 modules)
 âœ“ Compiled /api/admin/demo/seed in 420ms (365 modules)
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`PartnerSite` (`id`, `name`, `slug`, `logoUrl`, `rating`, `features`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `rating` = ?, `features` = ?, `siteUrl` = ?, `isActive` = ?, `updatedAt` = ? WHERE (`main`.`PartnerSite`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `rating` AS `rating`, `features` AS `features`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Campaign` (`id`, `title`, `slug`, `description`, `imageUrl`, `ctaUrl`, `badgeLabel`, `bonusText`, `bonusAmount`, `tags`, `startDate`, `endDate`, `isActive`, `isFeatured`, `priority`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `imageUrl` = ?, `ctaUrl` = ?, `badgeLabel` = ?, `bonusText` = ?, `bonusAmount` = ?, `tags` = ?, `startDate` = ?, `endDate` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`ReviewBrand` (`id`, `name`, `slug`, `logoUrl`, `editorialSummary`, `siteUrl`, `isActive`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `name` = ?, `slug` = ?, `logoUrl` = ?, `siteUrl` = ?, `isActive` = ?, `editorialSummary` = ?, `updatedAt` = ? WHERE (`main`.`ReviewBrand`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `name` AS `name`, `slug` AS `slug`, `logoUrl` AS `logoUrl`, `editorialSummary` AS `editorialSummary`, `siteUrl` AS `siteUrl`, `isActive` AS `isActive`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`SiteReview` (`id`, `brandId`, `author`, `isAnonymous`, `rating`, `isPositive`, `content`, `isApproved`, `isRejected`, `helpfulCount`, `notHelpfulCount`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `brandId` AS `brandId`, `author` AS `author`, `isAnonymous` AS `isAnonymous`, `rating` AS `rating`, `isPositive` AS `isPositive`, `content` AS `content`, `isApproved` AS `isApproved`, `isRejected` AS `isRejected`, `helpfulCount` AS `helpfulCount`, `notHelpfulCount` AS `notHelpfulCount`, `repliedBy` AS `repliedBy`, `replyText` AS `replyText`, `repliedAt` AS `repliedAt`, `avatarUrl` AS `avatarUrl`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoCoupon` (`id`, `title`, `date`, `publishedAt`, `isActive`, `totalOdd`, `status`, `upVotes`, `downVotes`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `title` AS `title`, `date` AS `date`, `publishedAt` AS `publishedAt`, `isActive` AS `isActive`, `totalOdd` AS `totalOdd`, `status` AS `status`, `upVotes` AS `upVotes`, `downVotes` AS `downVotes`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`BankoMatch` (`id`, `couponId`, `homeTeam`, `awayTeam`, `league`, `startTime`, `prediction`, `odd`, `resultScore`, `result`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `couponId` AS `couponId`, `homeTeam` AS `homeTeam`, `awayTeam` AS `awayTeam`, `league` AS `league`, `startTime` AS `startTime`, `prediction` AS `prediction`, `odd` AS `odd`, `resultScore` AS `resultScore`, `result` AS `result`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`TelegramGroup` (`id`, `name`, `members`, `imageUrl`, `ctaUrl`, `type`, `isFeatured`, `badges`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `name` AS `name`, `members` AS `members`, `membersText` AS `membersText`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `type` AS `type`, `isFeatured` AS `isFeatured`, `badges` AS `badges`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
prisma:query BEGIN IMMEDIATE
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`Bonus` (`id`, `title`, `slug`, `description`, `shortDescription`, `bonusType`, `gameCategory`, `amount`, `wager`, `minDeposit`, `imageUrl`, `postImageUrl`, `ctaUrl`, `badges`, `validityText`, `startDate`, `endDate`, `features`, `isActive`, `isFeatured`, `priority`, `isApproved`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON CONFLICT  (`slug`) DO UPDATE SET `title` = ?, `slug` = ?, `description` = ?, `shortDescription` = ?, `bonusType` = ?, `gameCategory` = ?, `amount` = ?, `wager` = ?, `minDeposit` = ?, `imageUrl` = ?, `postImageUrl` = ?, `ctaUrl` = ?, `badges` = ?, `validityText` = ?, `startDate` = ?, `endDate` = ?, `features` = ?, `isActive` = ?, `isFeatured` = ?, `priority` = ?, `isApproved` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query COMMIT
 POST /api/admin/demo/seed 200 in 638ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
Port 3002 in use. Retrying on 3003...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
> Ready on http://0.0.0.0:3003
> Socket.IO server running at ws://0.0.0.0:3003/api/socketio
 âœ“ Compiled /middleware in 125ms (108 modules)
 â—‹ Compiling / ...
 âœ“ Compiled / in 2.1s (1848 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 2721ms
 âœ“ Compiled in 626ms (872 modules)
 âœ“ Compiled /_not-found in 397ms (1838 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 536ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 324ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 21ms
 â—‹ Compiling /api/partner-sites ...
 âœ“ Compiled /api/partner-sites in 785ms (1868 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/seo?page=%2F 200 in 914ms
 GET /api/campaigns 200 in 908ms
 GET /api/bonuses?active=true&featured=true 200 in 909ms
 GET /api/marquee-logos 200 in 911ms
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 920ms
 GET /api/partner-sites 200 in 914ms
 âœ“ Compiled /[slug] in 331ms (1870 modules)
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 1048ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 413ms
 â—‹ Compiling /_error ...
 âœ“ Compiled /_error in 1674ms (2204 modules)
 âœ“ Compiled in 207ms (2204 modules)
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE `main`.`SeoSetting`.`page` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 2327ms
 GET /api/bonuses?active=true&featured=true 404 in 2037ms
 GET /api/analytics-codes 404 in 2038ms
 GET /api/seo?page=%2F 404 in 2039ms
 GET /api/marquee-logos 404 in 2039ms
 GET /api/partner-sites 404 in 2041ms
 GET / 200 in 770ms
 GET /api/campaigns 200 in 97ms
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 177ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 72ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 24ms
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
 GET /api/marquee-logos 200 in 47ms
 GET /api/partner-sites 200 in 48ms
 GET /api/bonuses?active=true&featured=true 200 in 49ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/seo?page=%2F 200 in 49ms
 GET /api/campaigns 200 in 50ms
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/orkundede/Downloads/workspace-695f5f49-0d66-4531-b713-ae8d10f5ced2/.next/cache/webpack/client-development/2.pack.gz_' -> '/Users/orkundede/Downloads/workspace-695f5f49-0d66-4531-b713-ae8d10f5ced2/.next/cache/webpack/client-development/2.pack.gz'
 âœ“ Compiled /icon.svg in 218ms (1097 modules)
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
 GET /icon.svg?122f4e7158a60d3a 200 in 384ms
 GET /service-worker.js 302 in 121ms
 GET /service-worker.js 302 in 264ms
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE `main`.`AffiliateLink`.`slug` IN (?,?) LIMIT ? OFFSET ?
 â—‹ Compiling /admin ...
 âœ“ Compiled /admin in 775ms (2287 modules)
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /_next/static/webpack/5b2903e98183edcc.webpack.hot-update.json 404 in 268ms
 GET /admin 200 in 1058ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 22ms
 âœ“ Compiled /api/admin/site-reviews in 484ms (2293 modules)
 GET /api/seo?page=%2Fadmin 200 in 521ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS `_count._all` FROM (SELECT `main`.`Bonus`.`id` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? LIMIT ? OFFSET ?) AS `sub`
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) AS `_count._all` FROM (SELECT `main`.`SiteReview`.`id` FROM `main`.`SiteReview` WHERE (`main`.`SiteReview`.`isApproved` = ? AND `main`.`SiteReview`.`isRejected` = ?) LIMIT ? OFFSET ?) AS `sub`
prisma:query SELECT `main`.`SiteReview`.`id`, `main`.`SiteReview`.`brandId`, `main`.`SiteReview`.`author`, `main`.`SiteReview`.`isAnonymous`, `main`.`SiteReview`.`rating`, `main`.`SiteReview`.`isPositive`, `main`.`SiteReview`.`content`, `main`.`SiteReview`.`isApproved`, `main`.`SiteReview`.`isRejected`, `main`.`SiteReview`.`helpfulCount`, `main`.`SiteReview`.`notHelpfulCount`, `main`.`SiteReview`.`repliedBy`, `main`.`SiteReview`.`replyText`, `main`.`SiteReview`.`repliedAt`, `main`.`SiteReview`.`avatarUrl`, `main`.`SiteReview`.`createdAt`, `main`.`SiteReview`.`updatedAt` FROM `main`.`SiteReview` WHERE (`main`.`SiteReview`.`isApproved` = ? AND `main`.`SiteReview`.`isRejected` = ?) ORDER BY `main`.`SiteReview`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) AS `_count._all` FROM (SELECT `main`.`SiteReview`.`id` FROM `main`.`SiteReview` WHERE `main`.`SiteReview`.`isApproved` = ? LIMIT ? OFFSET ?) AS `sub`
prisma:query SELECT `main`.`SiteReview`.`id`, `main`.`SiteReview`.`brandId`, `main`.`SiteReview`.`author`, `main`.`SiteReview`.`isAnonymous`, `main`.`SiteReview`.`rating`, `main`.`SiteReview`.`isPositive`, `main`.`SiteReview`.`content`, `main`.`SiteReview`.`isApproved`, `main`.`SiteReview`.`isRejected`, `main`.`SiteReview`.`helpfulCount`, `main`.`SiteReview`.`notHelpfulCount`, `main`.`SiteReview`.`repliedBy`, `main`.`SiteReview`.`replyText`, `main`.`SiteReview`.`repliedAt`, `main`.`SiteReview`.`avatarUrl`, `main`.`SiteReview`.`createdAt`, `main`.`SiteReview`.`updatedAt` FROM `main`.`SiteReview` WHERE `main`.`SiteReview`.`isApproved` = ? ORDER BY `main`.`SiteReview`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`ReviewBrand`.`id`, `main`.`ReviewBrand`.`name`, `main`.`ReviewBrand`.`slug`, `main`.`ReviewBrand`.`logoUrl` FROM `main`.`ReviewBrand` WHERE `main`.`ReviewBrand`.`id` IN (?) LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 500ms
 GET /api/admin/bonuses?status=pending&page=1&limit=1 200 in 541ms
 GET /api/admin/site-reviews?status=pending&limit=1 200 in 503ms
 GET /api/admin/site-reviews?status=approved&limit=1 200 in 504ms
 GET /api/review-brands 200 in 505ms
prisma:query SELECT `main`.`ReviewBrand`.`id`, `main`.`ReviewBrand`.`name`, `main`.`ReviewBrand`.`slug`, `main`.`ReviewBrand`.`logoUrl`, `main`.`ReviewBrand`.`editorialSummary`, `main`.`ReviewBrand`.`siteUrl`, `main`.`ReviewBrand`.`isActive`, `main`.`ReviewBrand`.`createdAt`, `main`.`ReviewBrand`.`updatedAt` FROM `main`.`ReviewBrand` WHERE 1=1 ORDER BY `main`.`ReviewBrand`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses 200 in 21ms
 âœ“ Compiled /api/carousel in 379ms (2306 modules)
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`CarouselSlide`.`id`, `main`.`CarouselSlide`.`title`, `main`.`CarouselSlide`.`subtitle`, `main`.`CarouselSlide`.`imageUrl`, `main`.`CarouselSlide`.`desktopImageUrl`, `main`.`CarouselSlide`.`mobileImageUrl`, `main`.`CarouselSlide`.`ctaLabel`, `main`.`CarouselSlide`.`ctaUrl`, `main`.`CarouselSlide`.`order`, `main`.`CarouselSlide`.`isActive`, `main`.`CarouselSlide`.`createdAt`, `main`.`CarouselSlide`.`updatedAt` FROM `main`.`CarouselSlide` WHERE 1=1 ORDER BY `main`.`CarouselSlide`.`order` ASC LIMIT ? OFFSET ?
 GET /api/marquee-logos 200 in 506ms
 GET /api/carousel 200 in 507ms
 GET /api/telegram-groups 200 in 510ms
prisma:query SELECT `main`.`TelegramGroup`.`id`, `main`.`TelegramGroup`.`name`, `main`.`TelegramGroup`.`members`, `main`.`TelegramGroup`.`membersText`, `main`.`TelegramGroup`.`imageUrl`, `main`.`TelegramGroup`.`ctaUrl`, `main`.`TelegramGroup`.`type`, `main`.`TelegramGroup`.`isFeatured`, `main`.`TelegramGroup`.`badges`, `main`.`TelegramGroup`.`createdAt`, `main`.`TelegramGroup`.`updatedAt` FROM `main`.`TelegramGroup` WHERE 1=1 ORDER BY `main`.`TelegramGroup`.`isFeatured` DESC, `main`.`TelegramGroup`.`createdAt` DESC LIMIT ? OFFSET ?
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 40ms
 âœ“ Compiled /admin/campaigns in 391ms (2327 modules)
 GET /admin/campaigns 200 in 480ms
 GET /api/seo?page=%2Fadmin%2Fcampaigns 200 in 20ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 21ms
 âœ“ Compiled /api/campaigns/[id] in 226ms (2329 modules)
Error: Route "/api/campaigns/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (src/app/api/campaigns/[id]/route.ts:19:67)
  17 |   try {
  18 |     const body = await req.json()
> 19 |     const updated = await db.campaign.update({ where: { id: params.id }, data: body })
     |                                                                   ^
  20 |     return NextResponse.json(updated)
  21 |   } catch (e: any) {
  22 |     return NextResponse.json({ error: e?.message ?? 'Error' }, { status: 400 })
prisma:query UPDATE `main`.`Campaign` SET `isFeatured` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
 PATCH /api/campaigns/cmgybw3mf0000m4llivb96hfp 200 in 862ms
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 9ms
Error: Route "/api/campaigns/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (src/app/api/campaigns/[id]/route.ts:19:67)
  17 |   try {
  18 |     const body = await req.json()
> 19 |     const updated = await db.campaign.update({ where: { id: params.id }, data: body })
     |                                                                   ^
  20 |     return NextResponse.json(updated)
  21 |   } catch (e: any) {
  22 |     return NextResponse.json({ error: e?.message ?? 'Error' }, { status: 400 })
prisma:query UPDATE `main`.`Campaign` SET `isFeatured` = ?, `updatedAt` = ? WHERE (`main`.`Campaign`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `imageUrl` AS `imageUrl`, `ctaUrl` AS `ctaUrl`, `badgeLabel` AS `badgeLabel`, `bonusText` AS `bonusText`, `bonusAmount` AS `bonusAmount`, `tags` AS `tags`, `startDate` AS `startDate`, `endDate` AS `endDate`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
 PATCH /api/campaigns/cmgybw3mh0001m4llsxefp64s 200 in 37ms
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 7ms
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET / 200 in 304ms
 GET /api/seo?page=%2F 200 in 24ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 26ms
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
 GET /api/partner-sites 200 in 27ms
 GET /api/marquee-logos 200 in 28ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses?active=true&featured=true 200 in 38ms
 GET /api/analytics-codes 200 in 47ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 56ms
 âœ“ Compiled /admin/bonuses in 495ms (2356 modules)
 GET /admin/bonuses 200 in 591ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 97ms
 GET / 200 in 101ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /admin/bonuses 200 in 38ms
 GET /api/seo?page=%2Fadmin%2Fbonuses 200 in 38ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses 200 in 7ms
 âœ“ Compiled /api/bonuses/[id] in 260ms (2344 modules)
Error: Route "/api/bonuses/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (src/app/api/bonuses/[id]/route.ts:22:69)
  20 |
  21 |     // Varolan item'Ä± al
> 22 |     const existing = await db.bonus.findUnique({ where: { id: params.id } })
     |                                                                     ^
  23 |     if (!existing) return NextResponse.json({ error: 'Not found' }, { status: 404 })
  24 |
  25 |     // Slug boÅŸsa baÅŸlÄ±ktan Ã¼ret ve benzersiz kÄ±l
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
Error: Route "/api/bonuses/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PATCH (src/app/api/bonuses/[id]/route.ts:47:64)
  45 |     }
  46 |
> 47 |     const updated = await db.bonus.update({ where: { id: params.id }, data: body })
     |                                                                ^
  48 |     return NextResponse.json(updated)
  49 |   } catch (e: any) {
  50 |     return NextResponse.json({ error: e?.message ?? 'Error' }, { status: 400 })
prisma:query UPDATE `main`.`Bonus` SET `isFeatured` = ?, `slug` = ?, `updatedAt` = ? WHERE (`main`.`Bonus`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `title` AS `title`, `slug` AS `slug`, `description` AS `description`, `shortDescription` AS `shortDescription`, `bonusType` AS `bonusType`, `gameCategory` AS `gameCategory`, `amount` AS `amount`, `wager` AS `wager`, `minDeposit` AS `minDeposit`, `imageUrl` AS `imageUrl`, `postImageUrl` AS `postImageUrl`, `ctaUrl` AS `ctaUrl`, `badges` AS `badges`, `validityText` AS `validityText`, `startDate` AS `startDate`, `endDate` AS `endDate`, `features` AS `features`, `isActive` AS `isActive`, `isFeatured` AS `isFeatured`, `priority` AS `priority`, `brandId` AS `brandId`, `isApproved` AS `isApproved`, `createdByLoginId` AS `createdByLoginId`, `createdByName` AS `createdByName`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
 PATCH /api/bonuses/cmgzbv3v70004m4bi5pe4wfnz 200 in 816ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE `main`.`Bonus`.`isApproved` = ? ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses 200 in 11ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET / 200 in 269ms
 GET /icon.svg?122f4e7158a60d3a 200 in 7ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/analytics-codes 200 in 15ms
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
 GET /api/bonuses?active=true&featured=true 200 in 29ms
 GET /api/marquee-logos 200 in 30ms
 GET /api/seo?page=%2F 200 in 31ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
 GET /api/campaigns 200 in 31ms
 GET /api/partner-sites 200 in 32ms
Error: Route "/[slug]" used `params.slug`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at GET (src/app/[slug]/route.ts:23:22)
  21 |   const wantsHTML = accept.includes('text/html')
  22 |
> 23 |   const slug = params.slug
     |                      ^
  24 |   const link = await db.affiliateLink.findUnique({ where: { slug } })
  25 |   if (!link) {
  26 |     return NextResponse.redirect(new URL('/', req.url), { status: 302 })
prisma:query SELECT `main`.`AffiliateLink`.`id`, `main`.`AffiliateLink`.`title`, `main`.`AffiliateLink`.`slug`, `main`.`AffiliateLink`.`targetUrl`, `main`.`AffiliateLink`.`clicks`, `main`.`AffiliateLink`.`isManual`, `main`.`AffiliateLink`.`createdAt`, `main`.`AffiliateLink`.`updatedAt` FROM `main`.`AffiliateLink` WHERE (`main`.`AffiliateLink`.`slug` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /service-worker.js 302 in 39ms
prisma:query SELECT 1
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /?ide_webview_request_time=1761445238313 200 in 133ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /@vite/client 404 in 21ms
prisma:query SELECT `main`.`SeoSetting`.`id`, `main`.`SeoSetting`.`page`, `main`.`SeoSetting`.`title`, `main`.`SeoSetting`.`description`, `main`.`SeoSetting`.`keywords`, `main`.`SeoSetting`.`canonicalUrl`, `main`.`SeoSetting`.`ogType`, `main`.`SeoSetting`.`ogTitle`, `main`.`SeoSetting`.`ogDescription`, `main`.`SeoSetting`.`ogImageUrl`, `main`.`SeoSetting`.`ogLogoUrl`, `main`.`SeoSetting`.`twitterTitle`, `main`.`SeoSetting`.`twitterDescription`, `main`.`SeoSetting`.`twitterImageUrl`, `main`.`SeoSetting`.`robotsIndex`, `main`.`SeoSetting`.`robotsFollow`, `main`.`SeoSetting`.`structuredData`, `main`.`SeoSetting`.`createdAt`, `main`.`SeoSetting`.`updatedAt` FROM `main`.`SeoSetting` WHERE (`main`.`SeoSetting`.`page` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/seo?page=%2F 200 in 15ms
 GET /api/analytics-codes 200 in 19ms
prisma:query SELECT `main`.`AnalyticsCode`.`id`, `main`.`AnalyticsCode`.`name`, `main`.`AnalyticsCode`.`type`, `main`.`AnalyticsCode`.`code`, `main`.`AnalyticsCode`.`injectTo` FROM `main`.`AnalyticsCode` WHERE `main`.`AnalyticsCode`.`isActive` = ? ORDER BY `main`.`AnalyticsCode`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Bonus`.`id`, `main`.`Bonus`.`title`, `main`.`Bonus`.`slug`, `main`.`Bonus`.`description`, `main`.`Bonus`.`shortDescription`, `main`.`Bonus`.`bonusType`, `main`.`Bonus`.`gameCategory`, `main`.`Bonus`.`amount`, `main`.`Bonus`.`wager`, `main`.`Bonus`.`minDeposit`, `main`.`Bonus`.`imageUrl`, `main`.`Bonus`.`postImageUrl`, `main`.`Bonus`.`ctaUrl`, `main`.`Bonus`.`badges`, `main`.`Bonus`.`validityText`, `main`.`Bonus`.`startDate`, `main`.`Bonus`.`endDate`, `main`.`Bonus`.`features`, `main`.`Bonus`.`isActive`, `main`.`Bonus`.`isFeatured`, `main`.`Bonus`.`priority`, `main`.`Bonus`.`brandId`, `main`.`Bonus`.`isApproved`, `main`.`Bonus`.`createdByLoginId`, `main`.`Bonus`.`createdByName`, `main`.`Bonus`.`createdAt`, `main`.`Bonus`.`updatedAt` FROM `main`.`Bonus` WHERE (`main`.`Bonus`.`isActive` = ? AND `main`.`Bonus`.`isFeatured` = ? AND `main`.`Bonus`.`isApproved` = ?) ORDER BY `main`.`Bonus`.`isFeatured` DESC, `main`.`Bonus`.`priority` DESC, `main`.`Bonus`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/bonuses?active=true&featured=true 200 in 16ms
 GET /api/partner-sites 200 in 20ms
prisma:query SELECT `main`.`PartnerSite`.`id`, `main`.`PartnerSite`.`name`, `main`.`PartnerSite`.`slug`, `main`.`PartnerSite`.`logoUrl`, `main`.`PartnerSite`.`rating`, `main`.`PartnerSite`.`features`, `main`.`PartnerSite`.`siteUrl`, `main`.`PartnerSite`.`isActive`, `main`.`PartnerSite`.`createdAt`, `main`.`PartnerSite`.`updatedAt` FROM `main`.`PartnerSite` WHERE 1=1 ORDER BY `main`.`PartnerSite`.`rating` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`MarqueeLogo`.`id`, `main`.`MarqueeLogo`.`imageUrl`, `main`.`MarqueeLogo`.`href`, `main`.`MarqueeLogo`.`order`, `main`.`MarqueeLogo`.`isActive`, `main`.`MarqueeLogo`.`createdAt`, `main`.`MarqueeLogo`.`updatedAt` FROM `main`.`MarqueeLogo` WHERE 1=1 ORDER BY `main`.`MarqueeLogo`.`order` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`Campaign`.`id`, `main`.`Campaign`.`title`, `main`.`Campaign`.`slug`, `main`.`Campaign`.`description`, `main`.`Campaign`.`imageUrl`, `main`.`Campaign`.`ctaUrl`, `main`.`Campaign`.`badgeLabel`, `main`.`Campaign`.`bonusText`, `main`.`Campaign`.`bonusAmount`, `main`.`Campaign`.`tags`, `main`.`Campaign`.`startDate`, `main`.`Campaign`.`endDate`, `main`.`Campaign`.`isActive`, `main`.`Campaign`.`isFeatured`, `main`.`Campaign`.`priority`, `main`.`Campaign`.`createdAt`, `main`.`Campaign`.`updatedAt` FROM `main`.`Campaign` WHERE 1=1 ORDER BY `main`.`Campaign`.`isFeatured` DESC, `main`.`Campaign`.`priority` DESC LIMIT ? OFFSET ?
 GET /api/marquee-logos 200 in 21ms
 GET /api/campaigns 200 in 22ms
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `npx tsx server.ts`[39m
Port 3000 in use. Retrying on 3001...
Port 3001 in use. Retrying on 3002...
> Ready on http://0.0.0.0:3000
> Socket.IO server running at ws://0.0.0.0:3000/api/socketio
> Ready on http://0.0.0.0:3001
> Socket.IO server running at ws://0.0.0.0:3001/api/socketio
> Ready on http://0.0.0.0:3002
> Socket.IO server running at ws://0.0.0.0:3002/api/socketio
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/orkundede/Downloads/workspace-695f5f49-0d66-4531-b713-ae8d10f5ced2/.next/cache/webpack/client-development/2.pack.gz_' -> '/Users/orkundede/Downloads/workspace-695f5f49-0d66-4531-b713-ae8d10f5ced2/.next/cache/webpack/client-development/2.pack.gz'
