// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  imageUrl    String?
  ctaUrl      String?
  badgeLabel  String?
  bonusText   String?
  bonusAmount Int?
  tags        Json?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bonus {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  description String?
  shortDescription String?
  bonusType   String?
  gameCategory String?
  amount     Int?
  wager      Int?
  minDeposit Int?
  imageUrl   String?
  postImageUrl String?
  ctaUrl     String?
  badges     Json?
  validityText String?
  startDate    DateTime?
  endDate      DateTime?
  features   Json?
  isActive   Boolean  @default(true)
  isFeatured Boolean  @default(false)
  priority   Int      @default(0)
  // Brand ownership & approval
  brandId    String?
  brand      ReviewBrand? @relation(fields: [brandId], references: [id])
  isApproved Boolean  @default(true)
  // Sender info (brand manager)
  createdByLoginId String?
  createdByName     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PartnerSite {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logoUrl   String?
  rating    Float?
  features  Json?
  siteUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarouselSlide {
  id         String   @id @default(cuid())
  title      String
  subtitle   String?
  imageUrl   String?
  desktopImageUrl String?
  mobileImageUrl  String?
  ctaLabel   String?
  ctaUrl     String?
  order      Int      @default(0) @unique
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MarqueeLogo {
  id        String   @id @default(cuid())
  imageUrl  String
  href      String?
  order     Int      @default(0) @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeoSetting {
  id              String   @id @default(cuid())
  page            String   @unique
  title           String?
  description     String?
  keywords        String?
  canonicalUrl    String?
  ogType          String? // e.g., "website", "article"
  ogTitle         String?
  ogDescription   String?
  ogImageUrl      String?
  ogLogoUrl       String?
  twitterTitle    String?
  twitterDescription String?
  twitterImageUrl String?
  robotsIndex     Boolean  @default(true)
  robotsFollow    Boolean  @default(true)
  structuredData  Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum TelegramType {
  CHANNEL
  GROUP
}

model TelegramGroup {
  id         String       @id @default(cuid())
  name       String
  members    Int?
  membersText String?
  imageUrl   String?
  ctaUrl     String
  type       TelegramType @default(GROUP)
  isFeatured Boolean      @default(false)
  badges     Json?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model SiteReview {
  id               String       @id @default(cuid())
  brandId          String
  brand            ReviewBrand  @relation(fields: [brandId], references: [id])
  author           String?
  isAnonymous      Boolean      @default(false)
  rating           Int?
  isPositive       Boolean?
  content          String
  isApproved       Boolean      @default(false)
  isRejected       Boolean      @default(false)
  helpfulCount     Int          @default(0)
  notHelpfulCount  Int          @default(0)
  repliedBy        String?
  replyText        String?
  repliedAt        DateTime?
  avatarUrl        String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([brandId])
}
model ReviewBrand {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  logoUrl          String?
  editorialSummary String?
  siteUrl          String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  reviews          SiteReview[]
  brandManagers    BrandManager[]
  bonuses          Bonus[]
  telegramSuggestions TelegramSuggestion[]
  specialOdds      SpecialOdd[]
}

model TelegramSuggestion {
  id           String   @id @default(cuid())
  name         String
  ctaUrl       String
  adminUsername String?
  members      Int?
  imageUrl     String?
  type         TelegramType @default(GROUP)
  isApproved   Boolean  @default(false)
  isRejected   Boolean  @default(false)
  badges       Json?
  // Brand ownership
  brandId      String?
  brand        ReviewBrand? @relation(fields: [brandId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AnalyticsCode {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("custom")
  code      String
  injectTo  String   @default("head") // head or body
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

model AffiliateLink {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  targetUrl  String
  clicks     Int      @default(0)
  isManual   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clicksLog  AffiliateClick[]
}

model AffiliateClick {
  id         String   @id @default(cuid())
  linkId     String
  link       AffiliateLink @relation(fields: [linkId], references: [id])
  ip         String?
  country    String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([linkId, createdAt])
  @@index([linkId, ip])
}


enum CouponStatus {
  PENDING
  WON
  LOST
}

enum MatchResult {
  PENDING
  WON
  LOST
  DRAW
  CANCELLED
}

model BankoCoupon {
  id          String        @id @default(cuid())
  title       String?
  date        DateTime      // Kupon tarihi (günlük kupon)
  publishedAt DateTime?
  isActive    Boolean       @default(true)
  totalOdd    Float?
  status      CouponStatus  @default(PENDING)
  matches     BankoMatch[]
  // Voting fields
  upVotes     Int           @default(0)
  downVotes   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([date])
}

model BankoMatch {
  id          String       @id @default(cuid())
  couponId    String
  coupon      BankoCoupon  @relation(fields: [couponId], references: [id])
  homeTeam    String
  awayTeam    String
  league      String?
  startTime   DateTime?
  prediction  String?
  odd         Float?
  resultScore String?      // Örn: "3-2"
  result      MatchResult  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([couponId])
}

model PageSponsor {
  id              String   @id @default(cuid())
  pageKey         String
  placement       String
  imageUrl        String? // eski kolonu migration kaldırdı; null bırakıyoruz
  desktopImageUrl String?
  mobileImageUrl  String?
  clickUrl        String?
  altText         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([pageKey, placement])
}

model LiveMatch {
  id           String   @id @default(cuid())
  matchTitle   String?
  embedUrl     String?
  embedCode    String?
  league       String?
  date         DateTime?
  status       String?
  isActive     Boolean  @default(true)
  bannerSetKey String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isActive, date])
}

model PageArticle {
  id        String   @id @default(cuid())
  slug      String   @unique // Örn: "kampanyalar", "bonuslar", "yorumlar", "anlasmali-siteler"...
  title     String?
  content   String   // HTML içerik
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrandManager {
  id           String       @id @default(cuid())
  brandId      String
  brand        ReviewBrand  @relation(fields: [brandId], references: [id])
  loginId      String       @unique
  passwordHash String
  name         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Özel Oran kartları için yönetilebilir model
model SpecialOdd {
  id          String   @id @default(cuid())
  brandName   String
  matchTitle  String
  oddsLabel   String
  conditions  String?
  imageUrl    String?
  ctaUrl      String?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  // Opsiyonel marka ilişkisi
  brandId     String?
  brand       ReviewBrand? @relation(fields: [brandId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, priority])
  @@index([brandId])
}