// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  imageUrl    String?
  ctaUrl      String?
  badgeLabel  String?
  bonusText   String?
  bonusAmount Int?
  tags        Json?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bonus {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  description String?
  shortDescription String?
  // Kategoriler: Bonus türü ve oyun/alan kategorisi
  bonusType   String?
  gameCategory String?
  amount     Int?
  wager      Int?
  minDeposit Int?
  imageUrl   String?
  postImageUrl String?
  ctaUrl     String?
  badges     Json?
  validityText String?
  startDate    DateTime?
  endDate      DateTime?
  features   Json?
  isActive   Boolean  @default(true)
  isFeatured Boolean  @default(false)
  priority   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PartnerSite {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logoUrl   String?
  rating    Float?
  features  Json?
  siteUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarouselSlide {
  id         String   @id @default(cuid())
  title      String
  subtitle   String?
  imageUrl   String?
  desktopImageUrl String?
  mobileImageUrl  String?
  ctaLabel   String?
  ctaUrl     String?
  order      Int      @default(0) @unique
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MarqueeLogo {
  id        String   @id @default(cuid())
  imageUrl  String
  href      String?
  order     Int      @default(0) @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeoSetting {
  id              String   @id @default(cuid())
  page            String   @unique
  title           String?
  description     String?
  keywords        String?
  canonicalUrl    String?
  ogTitle         String?
  ogDescription   String?
  ogImageUrl      String?
  twitterTitle    String?
  twitterDescription String?
  twitterImageUrl String?
  robotsIndex     Boolean  @default(true)
  robotsFollow    Boolean  @default(true)
  structuredData  Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum TelegramType {
  CHANNEL
  GROUP
}

model TelegramGroup {
  id         String       @id @default(cuid())
  name       String
  members    Int?
  membersText String?
  imageUrl   String?
  ctaUrl     String
  type       TelegramType @default(GROUP)
  isFeatured Boolean      @default(false)
  badges     Json?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model SiteReview {
  id               String       @id @default(cuid())
  brandId          String
  brand            ReviewBrand  @relation(fields: [brandId], references: [id])
  author           String?
  isAnonymous      Boolean      @default(false)
  rating           Int?
  isPositive       Boolean?
  content          String
  isApproved       Boolean      @default(false)
  isRejected       Boolean      @default(false)
  helpfulCount     Int          @default(0)
  notHelpfulCount  Int          @default(0)
  repliedBy        String?
  replyText        String?
  repliedAt        DateTime?
  avatarUrl        String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([brandId])
}
model ReviewBrand {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  logoUrl          String?
  editorialSummary String?
  siteUrl          String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  reviews          SiteReview[]
}

model TelegramSuggestion {
  id           String   @id @default(cuid())
  name         String
  ctaUrl       String
  adminUsername String?
  members      Int?
  imageUrl     String?
  type         TelegramType @default(GROUP)
  isApproved   Boolean  @default(false)
  isRejected   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AnalyticsCode {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("custom")
  code      String
  injectTo  String   @default("head") // head or body
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

model AffiliateLink {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  targetUrl  String
  clicks     Int      @default(0)
  isManual   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clicksLog  AffiliateClick[]
}

model AffiliateClick {
  id         String   @id @default(cuid())
  linkId     String
  link       AffiliateLink @relation(fields: [linkId], references: [id])
  ip         String?
  country    String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([linkId, createdAt])
  @@index([linkId, ip])
}

model PushSubscriber {
  id             String   @id @default(cuid())
  uuid           String   @default(uuid())
  endpoint       String   @unique
  p256dh         String
  auth           String
  browser        String?
  device         String?
  createdAt      DateTime @default(now())
  lastActiveAt   DateTime?
  isActive       Boolean  @default(true)
  unsubscribedAt DateTime?
  logs           PushLog[]

  @@index([isActive])
  @@index([createdAt])
  @@index([lastActiveAt])
}

model PushNotification {
  id            String   @id @default(cuid())
  title         String
  body          String
  clickAction   String?
  icon          String?
  image         String?
  segment       String   @default("all")
  targetCount   Int      @default(0)
  sentCount     Int      @default(0)
  receivedCount Int      @default(0)
  clickCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  logs          PushLog[]

  @@index([createdAt])
}

model PushLog {
  id             String   @id @default(cuid())
  notificationId String
  notification   PushNotification @relation(fields: [notificationId], references: [id])
  subscriberId   String
  subscriber     PushSubscriber   @relation(fields: [subscriberId], references: [id])
  status         String   @default("sent") // sent, failed, received, clicked
  error          String?
  sentAt         DateTime?
  receivedAt     DateTime?
  clickedAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([notificationId])
  @@index([subscriberId])
  @@index([status])
}

model PushPermissionScreen {
  id          String   @id @default(cuid())
  title       String?
  description String?
  allowText   String?  @default("İzin Ver")
  laterText   String?  @default("Daha Sonra")
  bgColor     String?  @default("#111827") // gray-900
  textColor   String?  @default("#FFFFFF")
  imageUrl    String?
  position    String   @default("bottom") // top | middle | bottom
  radiusClass String?  @default("rounded-xl")
  shadowClass String?  @default("shadow-lg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}